[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "matplotlib"]

[project]
authors = [
    {name = "Constantin Gahr", email = "latexplotlib.gvxel@aleeas.com"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "appdirs",
    "matplotlib",
]
description = "Perfect matplotlib figures for latex"
dynamic = ["version"]
keywords = [
    "latex",
    "matplotlib-figures",
    "matplotlib-style-sheets",
    "matplotlib-styles",
    "python",
]
license = {text = "MIT"}
name = "latexplotlib"
readme = "README.md"
requires-python = ">=3.7.1"

[project.optional-dependencies]
tests = [
    "coverage",
    "pytest",
    "pytest-console-scripts",
    "pytest-cov",
    "pytest-env",
    "pytest-mock",
]
linters =  [
    "black",
    "isort",
    "mypy",
    "ruff",
    "types-appdirs",
]

[project.urls]
Homepage = "https://github.com/cgahr/latexplotlib"
Issues = "https://github.com/cgahr/latexplotlib/issues"

[tool.setuptools.dynamic]
version = {attr = "latexplotlib._version.__version__"}

[tool.setuptools.package-data]
opinf =  ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.pytest.ini_options]
addopts = "--cov=src --cov-report=html --cov-report=term"
testpaths = [
    "tests",
]

[tool.pylint.main]
ignore = [
    ".cache",
    ".git",
    ".ipynb_checkpoints",
    "__pycache__",
    "build",
    "build",
    "dist",
    "examples",
    "setup*",
    "tests",
]
ignore-patterns = [".*\\.md$"]
persistent = true
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "snake_case"
attr-naming-style = "snake_case"
class-attribute-naming-style = "any"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
function-naming-style = "snake_case"
good-names = ["df", "ax", "y1", "y2"]
good-names-rgxs = ["([A-Za-z]{1}|[a-z]+[0-9]*|[A-Z]{1}.*)$"]
method-naming-style = "snake_case"
module-naming-style = "snake_case"
variable-naming-style = "snake_case"

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["BaseException", "Exception"]

[tool.pylint.format]
max-line-length = "88"

[tool.pylint.logging]
logging-modules = ["logging"]
disable = [
    "missing-class-docstring",
    "logging-format-interpolation",
]
[tool.pylint.per-file-ignores]
"tests/*" = [
    "import-error",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-self-use",
    "protected-access",
    "redefined-outer-name",
    "too-few-public-methods",
    "too-many-arguments",
    "unused-argument",
]


[tool.isort]
profile = "black"

[tool.mypy]
check_untyped_defs = true
exclude = [
    ".cache",
    ".git",
    ".ipynb_checkpoints",
    "__pycache__",
    "build",
    "dist",
    "examples",
    "setup*",
    "tests",
]
mypy_path = "src"
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
]
ignore_missing_imports = true

[tool.ruff]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    # "D",
    "UP",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT", # unclear if good or not
    "B",
    "A",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "INP",
    "PYI",
    "PT",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "NPY",
    "RUF",
]
target-version = "py38"
ignore = [
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN401",
    "I001",
]
unfixable = ["I001"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", 'F403']
"examples/*" = ["INP"]
"tests/*" = [
    "ANN",
    "ARG002",
    "INP",
    "PLR0913",  # too-many-arguments
    "S101",
    "SLF001",
]
